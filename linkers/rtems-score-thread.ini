;
; RTEMS Supercore Thread Trace Configurations
;
[rtems-score-thread-all]
trace = _Thread_Handler_initialization, _Thread_Create_idle, _Thread_Start_multitasking
trace = _Stack_Allocate, _Stack_Free, _Thread_Start
trace = _Thread_Yield, _Thread_Set_life_protection
trace = _Thread_Kill_zombies
trace = _Thread_Clear_state, _Thread_Set_state, _Thread_Load_environment
trace = _Thread_Handler
trace = _Thread_Get

[rtems-score-thread-create-destory]
traces = rtems-score-thread-create, rtems-score-thread-destroy

[rtems-score-thread-create]
trace = _Thread_Handler_initialization, _Thread_Create_idle
trace = _Stack_Allocate, _Thread_Start
trace = _Thread_Restart, _Thread_Handler

[rtems-score-thread-destroy]
trace = _Thread_Kill_zombies

[rtems-score-thread-activity]
trace = _Thread_Yield, _Thread_Set_life_protection
trace = _Thread_Clear_state,
trace =  _Thread_Set_state, _Thread_Load_environment
trace = _Thread_Get
trace = _Thread_Priority_update

[rtems-score-thread-signatures]
_Thread_Handler_initialization = void, void
_Thread_Create_idle = void, void
_Thread_Start_multitasking = void, void
_Stack_Allocate = void*, size_t
_Stack_Free = void, void*
_Thread_Start = Status_Control, Thread_Control*, const Thread_Entry_information*, ISR_lock_Context*
_Thread_Yield = void, Thread_Control*
_Thread_Set_life_protection = Thread_Life_state, Thread_Life_state
_Thread_Kill_zombies = void, void
_Thread_Clear_state = States_Control, Thread_Control*, States_Control
_Thread_Set_state = States_Control, Thread_Control*, States_Control
_Thread_Load_environment = void, Thread_Control*
_Thread_Handler = void, void
_Thread_Get = Thread_Control*, Objects_Id, ISR_lock_Context*
_Thread_Priority_update = Thread_Control*, Thread_queue_Context*

